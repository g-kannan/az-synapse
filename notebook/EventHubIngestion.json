{
	"name": "EventHubIngestion",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "poc1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b18f5646-60bf-45ad-8e3a-995eb6474ca8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ec1b2421-3014-42bc-afc8-824cc0b3fc95/resourceGroups/rgdataeng/providers/Microsoft.Synapse/workspaces/synaci/bigDataPools/poc1",
				"name": "poc1",
				"type": "Spark",
				"endpoint": "https://synaci.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/poc1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import json\n",
					"from notebookutils import mssparkutils\n",
					"conn = mssparkutils.credentials.getSecret('cikvdataeng' , 'eh-telco-secret')\n",
					"print(conn)"
				],
				"execution_count": 69
			},
			{
				"cell_type": "code",
				"source": [
					"# Start from beginning of stream\n",
					"startOffset = \"-1\"\n",
					"# Create the positions\n",
					"startingEventPosition = {\n",
					"  \"offset\": startOffset,  \n",
					"  \"seqNo\": -1,            #not in use\n",
					"  \"enqueuedTime\": None,   #not in use\n",
					"  \"isInclusive\": True\n",
					"}"
				],
				"execution_count": 70
			},
			{
				"cell_type": "code",
				"source": [
					"# Initialize event hub config dictionary with connectionString\n",
					"\n",
					"ehConf = {}\n",
					"connectionString=conn+';EntityPath=telco'\n",
					"\n",
					"ehConf['eventhubs.connectionString'] = connectionString\n",
					"\n",
					"# Add consumer group to the ehConf dictionary\n",
					"\n",
					"ehConf['eventhubs.consumerGroup'] = \"$Default\"\n",
					"\n",
					"# ehConf[\"eventhubs.startingPosition\"] = json.dumps(startingEventPosition)\n",
					"# ehConf['eventhubs.startingPosition'] = \"@start\"\n",
					"\n",
					"# Encrypt ehConf connectionString property\n",
					"\n",
					"ehConf['eventhubs.connectionString'] = sc._jvm.org.apache.spark.eventhubs.EventHubsUtils.encrypt(connectionString)"
				],
				"execution_count": 85
			},
			{
				"cell_type": "code",
				"source": [
					"event_hub_df = spark.readStream.format(\"eventhubs\").options(**ehConf).load()"
				],
				"execution_count": 87
			},
			{
				"cell_type": "code",
				"source": [
					"event_hub_df.schema"
				],
				"execution_count": 81
			},
			{
				"cell_type": "code",
				"source": [
					"# display(event_hub_df)"
				],
				"execution_count": 82
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import *\n",
					"\n",
					"import  pyspark.sql.functions as F\n",
					"\n",
					"events_schema = StructType([StructField('body', BinaryType(), True), StructField('partition', StringType(), True), StructField('offset', StringType(), True), StructField('sequenceNumber', LongType(), True), StructField('enqueuedTime', TimestampType(), True), StructField('publisher', StringType(), True), StructField('partitionKey', StringType(), True), StructField('properties', MapType(StringType(), StringType(), True), True), StructField('systemProperties', MapType(StringType(), StringType(), True), True)])\n",
					"\n",
					"decoded_df = event_hub_df.select(F.col(\"body\").cast(\"string\").alias(\"decoded_body\"), \"enqueuedTime\")"
				],
				"execution_count": 83
			},
			{
				"cell_type": "code",
				"source": [
					"# Write to Delta table\n",
					"decoded_df.writeStream \\\n",
					"    .format(\"delta\") \\\n",
					"    .outputMode(\"append\") \\\n",
					"    .trigger(availableNow=True) \\\n",
					"    .option(\"checkpointLocation\", \"abfss://ucext@sadataengci.dfs.core.windows.net/synapse_spark_pool/telco_ingest_checkpoint/\") \\\n",
					"    .start('abfss://ucext@sadataengci.dfs.core.windows.net/synapse_spark_pool/telco_ingest/')"
				],
				"execution_count": 84
			}
		]
	}
}